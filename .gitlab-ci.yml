default:
  image: php:7.3
  before_script:
    - apt-get update -yqq
    - apt-get install git zip zlib1g-dev libzip-dev libxml2-dev libpng-dev libghc-curl-dev libldb-dev libldap2-dev -yqq
    - docker-php-ext-install pdo_mysql zip xml intl mbstring gd curl bcmath opcache ldap
    - pecl install xdebug \
      && docker-php-ext-enable xdebug
    - curl -sS https://getcomposer.org/installer | php

services:
  - mysql:5.5

variables:
  MYSQL_DATABASE: db
  MYSQL_ROOT_PASSWORD: password
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - tests
  - release

# On build la CSS et le JS
build:assets:
  inherit:
    default: false
  stage: build
  image: node:10-alpine
  script:
    - apk add --no-cache jq python gcc g++ make
    - yarn install
    - yarn build
  artifacts:
    expire_in: '1 hour'
    paths:
      - public/build

# On descend les paquets composer
build:composer-install:
  inherit:
    default: true
  stage: build
  script:
    - php composer.phar install --no-dev
  artifacts:
    expire_in: '1 hour'
    paths:
      - vendor

# Tests PHPUNIT
test:phpunit:
  inherit:
    default: true
  stage: tests
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  script:
    - cp .env.dist .env
    - sed -i -e "s/%%ENEDIS_CLIENT_ID%%/${ENEDIS_CLIENT_ID}/g" .env
    - sed -i -e "s/%%ENEDIS_CLIENT_SECRET%%/${ENEDIS_CLIENT_SECRET}/g" .env
    - sed -i -e "s/%%ENEDIS_REDIRECT_URI%%/${ENEDIS_REDIRECT_URI}/g" .env
    - php composer.phar install
    - php bin/console aeneria:install -n
    - php bin/console aeneria:dev:generate-fake-data --from="7 days ago" --user-name=admin --user-password=password
    - php bin/console aeneria:user:grant admin
    - php bin/console aeneria:dev:generate-fake-data --from="7 days ago" --user-name=user-test --user-password=password
    - php bin/phpunit --coverage-text --colors=never -vvv

# On vérifie que la documentation build correctement
test:documentation-build:
  inherit:
    default: false
  stage: tests
  image: python:3.7-alpine
  script:
    - pip install -U sphinx
    - cd docs
    - sphinx-build -b html . _build

# Sur un tag, on crée une release contenant un lien vers les builds
release:app:
  inherit:
    default: false
  stage: release
  only:
    - tags
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - apk add --update curl tar zip rsync && rm -rf /var/cache/apk/*
    - 'command -v ssh-agent >/dev/null || ( apk add --update openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - cd ..
    - tar -cvf aeneria-app-$CI_COMMIT_TAG.tar aeneria-app/
    - tar -zcvf aeneria-app-$CI_COMMIT_TAG.tar.gz aeneria-app/
    - tar -cjvf aeneria-app-$CI_COMMIT_TAG.tar.bz2 aeneria-app/
    - zip -r aeneria-app-$CI_COMMIT_TAG.zip aeneria-app/
    - rsync aeneria-app-$CI_COMMIT_TAG.tar $SSH_USER@$SSH_SERVER:www/.
    - rsync aeneria-app-$CI_COMMIT_TAG.tar.gz $SSH_USER@$SSH_SERVER:www/.
    - rsync aeneria-app-$CI_COMMIT_TAG.tar.bz2 $SSH_USER@$SSH_SERVER:www/.
    - rsync aeneria-app-$CI_COMMIT_TAG.zip $SSH_USER@$SSH_SERVER:www/.
    # On release un latest que si ce n'est pas une alpha ou beta
    - '[[ $CI_COMMIT_TAG =~ ^[0-9\.]*$ ]] && rsync aeneria-app-latest.tar $SSH_USER@$SSH_SERVER:www/.'
    - '[[ $CI_COMMIT_TAG =~ ^[0-9\.]*$ ]] && rsync aeneria-app-latest.tar.gz $SSH_USER@$SSH_SERVER:www/.'
    - '[[ $CI_COMMIT_TAG =~ ^[0-9\.]*$ ]] && rsync aeneria-app-latest.tar.bz2 $SSH_USER@$SSH_SERVER:www/.'
    - '[[ $CI_COMMIT_TAG =~ ^[0-9\.]*$ ]] && rsync aeneria-app-latest.zip $SSH_USER@$SSH_SERVER:www/.'
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Version $CI_COMMIT_TAG'
    description: CHANGELOG.md